#!/usr/bin/env ruby

# Command line access to wordreference.com translations

$LOAD_PATH.push File.expand_path("../../lib", __FILE__)

require 'wordtranslationfast_info'
require 'optparse'
require 'net/http'
require 'json'
require 'yaml'

# JSON API URL with placeholders
# (in form http://api.wordreference.com/{api_version}/{API_key}/json/{dictionary}/)
API_URL = 'http://api.wordreference.com/0.8/%s/json/%s/'

CONFIG_FILE = File.join(ENV['HOME'],'.wordtranslationfast.rc.yml')
FORMATS = ['pretty', 'csv']

options = {
  :delimiter => "\t",
  :dictionary => 'esen',
  :joiner => ', ',
  :switch => false,
  :key => nil
}

# Load or create configuration file
if File.exists? CONFIG_FILE
  config_options = YAML.load_file(CONFIG_FILE)
  options.merge!(config_options)
else
  File.open(CONFIG_FILE,'w') { |file| YAML::dump(options,file) }
  STDERR.puts "Initialized configuration file in #{CONFIG_FILE}"
end

option_parser = OptionParser.new do |opts|
  executable_name = File.basename($PROGRAM_NAME)
  opts.banner = "#{WordTranslationFast::DESCRIPTION}\n\nUsage: #{executable_name} [options] term\n"
  
  # Program switches
  opts.on('-s', '--switch-order',
          'switch order in which term and translation are outputted') do
    options[:switch] = true
  end
  
  # Program flags
  opts.on('--delimiter DELIMITER',
          'delimiter to use for csv file') do |delimiter|
    options[:delimiter] = delimiter
  end
  opts.on('-d DICTIONARY', '--dictionary DICTIONARY',
          'translation dictionary to use') do |dictionary|
    options[:dictionary] = dictionary
  end
  opts.on('--format FORMAT',
          'Format of the output (\'pretty\' for TTY, \'csv\' otherwise)') do |format|
    options[:format] = format
  end
  opts.on('-j JOINER', '--joiner JOINER',
          'characters used to join multiple definitions') do |joiner|
    options[:joiner] = joiner
  end
  opts.on('-k API_KEY', '--api-key API_KEY',
          'your wordreference.com api key') do |key|
    options[:key] = key
  end
end

exit_status = 0
begin
  option_parser.parse!
  
  terms = []
  if options[:key].to_s.empty?
    STDERR.puts "error: you must provide an api key for wordreference.com
       (check your #{File.basename(CONFIG_FILE)} file in your home directory)\n"
    exit_status |= 0b0100
  elsif !options[:format].nil? && !FORMATS.include?(options[:format])
    STDERR.puts "error: you must provide a valid output format\n"
    exit_status |= 0b1000
  elsif ARGV.empty?
    STDERR.puts "Reading terms from stdin..."
    terms = STDIN.readlines.map { |term| term.chomp }
  else
    ARGV.each { |term| terms << term.chomp }
  end
  
  if terms.empty? && exit_status == 0
    STDERR.puts "error: you must supply a term to translate\n"
    exit_status |= 0b0010
  end
  
  STDERR.puts "\n" + option_parser.help if exit_status != 0
  
rescue OptionParser::InvalidArgument => ex
  STDERR.puts ex.message
  STDERR.puts option_parser
  exit_status |= 0b0001
end
exit exit_status unless exit_status == 0

uri = URI(sprintf(API_URL, options[:key],options[:dictionary]))
collected_translations = {}

Net::HTTP.start(uri.host, uri.port) do |http|  
  terms.each do |term|
    STDERR.puts "Translating \"#{term}\"..."
    request = Net::HTTP::Get.new uri.request_uri+URI::encode(term)
    response = http.request request
    if response.is_a?(Net::HTTPSuccess)
      translations = JSON.load(response.body)
    else
      STDERR.puts "error: failed to connect to wordreference.com\n"
      exit 0b0100
    end
    
    # check for problem in translating word
    if translations.has_key? 'Error'
      puts term + ' - ' + translations['Note']
      next
    end

    # check for redirect
    if translations.has_key? 'URL'
      puts term + ' - ' + translations['URL']
      next
    end
        
    # loop through and collect translations
    translations.each do |key, value|
      if key.start_with? 'term'
        if translations[key].has_key? 'PrincipalTranslations'
          primary_translations = translations[key]['PrincipalTranslations']
        elsif translations[key].has_key? 'Entries'
          primary_translations = translations[key]['Entries']
        else
          next
        end
        primary_translations.each do |trans_key,translation|
          new_term = translation['OriginalTerm']['term'].strip
          translations_for_new_term = []
          translation.each do |def_key,definition|
            if def_key.end_with? 'Translation'
              translations_for_new_term |= definition['term'].split(',').map{ |t| t.strip }
            end
          end
          if collected_translations.has_key? new_term
            collected_translations[new_term] |= translations_for_new_term
          else
            collected_translations[new_term] = translations_for_new_term
          end
        end
      end
    end
  end
end

if options[:format].nil?
  if STDOUT.tty?
    options[:format] = 'pretty'
  else
    options[:format] = 'csv'
  end
end

if options[:format] == 'pretty'
  options[:delimiter] = ' - '
end

if collected_translations.empty?
  STDERR.puts "No translation found\n"
  exit 0b0100
end

# output translations
collected_translations.each do |term, translation|
  translation = translation.join(options[:joiner])
  unless options[:switch]
    term1 = term
    term2 = translation
  else
    term1 = translation
    term2 = term
  end
  puts "#{term1}#{options[:delimiter]}#{term2}"
end

# Signal.trap("SIGINT") do
#   FileUtils.rm output_file exit 1
# end
